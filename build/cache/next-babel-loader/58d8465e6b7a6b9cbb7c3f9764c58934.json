{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/delpinor/Dropbox/git/delpinocardenas.com.ar/barrister/components/Form/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport Joi from 'joi-browser';\nimport { Button, Grid, TextField } from '@material-ui/core';\nimport { toast } from 'react-toastify';\n\nclass Form extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      name: '',\n      phone: '',\n      email: '',\n      address: '',\n      description: '',\n      error: {}\n    });\n\n    _defineProperty(this, \"schema\", {\n      email: Joi.string().email({\n        minDomainAtoms: 2\n      }).required().error(errors => {\n        errors.forEach(err => {\n          switch (err.type) {\n            case \"string.email\":\n              err.message = 'email mast be A Valid Email';\n              break;\n\n            default:\n              err.message = 'email can not be empity';\n              break;\n          }\n        });\n        return errors;\n      }),\n      phone: Joi.string().required().error(errors => {\n        errors.forEach(err => {\n          switch (err.type) {\n            default:\n              err.message = 'phone can not be Empity';\n              break;\n          }\n        });\n        return errors;\n      }),\n      name: Joi.string().required().error(errors => {\n        errors.forEach(err => {\n          switch (err.type) {\n            default:\n              err.message = 'name can not be Empity';\n              break;\n          }\n        });\n        return errors;\n      }),\n      description: Joi.string().required().error(errors => {\n        errors.forEach(err => {\n          switch (err.type) {\n            default:\n              err.message = 'description can not be Empity';\n              break;\n          }\n        });\n        return errors;\n      }),\n      address: Joi.string()\n    });\n\n    _defineProperty(this, \"changeHandler\", event => {\n      const error = _objectSpread({}, this.state.error);\n\n      const errorMassage = this.validationProperty(event);\n\n      if (errorMassage) {\n        error[event.target.name] = errorMassage;\n      } else {\n        delete error[event.target.name];\n      }\n\n      this.setState({\n        [event.target.name]: event.target.value,\n        error\n      });\n    });\n\n    _defineProperty(this, \"handleChange\", value => {\n      this.setState({\n        country: value\n      });\n    });\n\n    _defineProperty(this, \"validationProperty\", event => {\n      const Obj = {\n        [event.target.name]: event.target.value\n      };\n      const schema = {\n        [event.target.name]: this.schema[event.target.name]\n      };\n      const {\n        error\n      } = Joi.validate(Obj, schema);\n      return error ? error.details[0].message : null;\n    });\n\n    _defineProperty(this, \"validate\", () => {\n      const options = {\n        abortEarly: false\n      };\n      const form = {\n        name: this.state.name,\n        email: this.state.email,\n        phone: this.state.phone,\n        description: this.state.description\n      };\n      const {\n        error\n      } = Joi.validate(form, this.schema, options);\n      if (!error) return null;\n      const errors = {};\n\n      for (let item of error.details) errors[item.path[0]] = item.message;\n\n      return errors;\n    });\n\n    _defineProperty(this, \"submitHandler\", event => {\n      event.preventDefault();\n      const error = this.validate();\n\n      if (error) {\n        this.setState({\n          error: error || {}\n        });\n      } else {\n        this.setState({\n          name: '',\n          phone: '',\n          email: '',\n          address: '',\n          description: ''\n        });\n        toast.success('Please check Consol log');\n      }\n    });\n  }\n\n  render() {\n    const options = [{\n      level: 'Family Law',\n      value: 'family law'\n    }, {\n      level: 'Criminal Law',\n      value: 'criminal law'\n    }, {\n      level: 'Business Law',\n      value: 'business law'\n    }, {\n      level: 'Personal Injury',\n      value: 'personal injury'\n    }, {\n      level: 'Education Law',\n      value: 'education law'\n    }, {\n      level: 'Drugs Crime',\n      value: 'drugs crime'\n    }];\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: this.submitHandler,\n      className: \"contactForm\",\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 4,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          sm: 6,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            className: \"formInput\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              placeholder: \"Your Name\",\n              value: this.state.name,\n              name: \"name\",\n              onChange: this.changeHandler,\n              className: \"form-control\",\n              type: \"text\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 29\n            }, this), this.state.error.name && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: this.state.error.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 55\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          sm: 6,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            className: \"formInput\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              placeholder: \"Phone\",\n              value: this.state.phone,\n              name: \"phone\",\n              onChange: this.changeHandler,\n              className: \"form-control\",\n              type: \"phone\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 29\n            }, this), this.state.error.phone && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: this.state.error.phone\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 56\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          sm: 6,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            className: \"formInput\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              placeholder: \"Email\",\n              value: this.state.email,\n              name: \"email\",\n              onChange: this.changeHandler,\n              className: \"form-control\",\n              type: \"email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 29\n            }, this), this.state.error.email && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: this.state.error.email\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 56\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          sm: 6,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            className: \"formInput\",\n            children: this.props.addressInfo ? /*#__PURE__*/_jsxDEV(Grid, {\n              className: \"formInput\",\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                placeholder: \"Address\",\n                value: this.state.address,\n                name: \"address\",\n                onChange: this.changeHandler,\n                className: \"form-control\",\n                type: \"address\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 33\n            }, this) : /*#__PURE__*/_jsxDEV(\"select\", {\n              value: this.state.address,\n              className: \"form-control\",\n              onChange: this.changeHandler,\n              name: \"address\",\n              children: options.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: option.value,\n                children: option.level\n              }, option.value, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 45\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            className: \"formInput\",\n            children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n              className: \"form-control\",\n              value: this.state.description,\n              onChange: this.changeHandler,\n              placeholder: \"Case Description...\",\n              name: \"description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 29\n            }, this), this.state.error.description && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: this.state.error.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 62\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          sm: 6,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            children: \"Appointment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Form;","map":{"version":3,"sources":["/home/delpinor/Dropbox/git/delpinocardenas.com.ar/barrister/components/Form/index.js"],"names":["React","Component","Joi","Button","Grid","TextField","toast","Form","name","phone","email","address","description","error","string","minDomainAtoms","required","errors","forEach","err","type","message","event","state","errorMassage","validationProperty","target","setState","value","country","Obj","schema","validate","details","options","abortEarly","form","item","path","preventDefault","success","render","level","submitHandler","changeHandler","props","addressInfo","map","option"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport Joi from 'joi-browser'\r\nimport { Button, Grid, TextField } from '@material-ui/core'\r\nimport { toast } from 'react-toastify';\r\nclass Form extends Component {\r\n    state = {\r\n        name: '',\r\n        phone: '',\r\n        email: '',\r\n        address: '',\r\n        description: '',\r\n        error: {}\r\n    }\r\n\r\n    schema = {\r\n        email: Joi.string().email({ minDomainAtoms: 2 }).required().error(errors => {\r\n            errors.forEach(err => {\r\n                switch (err.type) {\r\n                    case \"string.email\":\r\n                        err.message = 'email mast be A Valid Email';\r\n                        break;\r\n                    default:\r\n                        err.message = 'email can not be empity';\r\n                        break;\r\n                }\r\n            });\r\n            return errors;\r\n        }),\r\n        phone: Joi.string().required().error(errors => {\r\n            errors.forEach(err => {\r\n                switch (err.type) {\r\n                    default:\r\n                        err.message = 'phone can not be Empity';\r\n                        break;\r\n                }\r\n            });\r\n            return errors;\r\n        }),\r\n        name: Joi.string().required().error(errors => {\r\n            errors.forEach(err => {\r\n                switch (err.type) {\r\n                    default:\r\n                        err.message = 'name can not be Empity';\r\n                        break;\r\n                }\r\n            });\r\n            return errors;\r\n        }),\r\n        description: Joi.string().required().error(errors => {\r\n            errors.forEach(err => {\r\n                switch (err.type) {\r\n                    default:\r\n                        err.message = 'description can not be Empity';\r\n                        break;\r\n                }\r\n            });\r\n            return errors;\r\n        }),\r\n        address: Joi.string(),\r\n    }\r\n    changeHandler = event => {\r\n        const error = { ...this.state.error };\r\n        const errorMassage = this.validationProperty(event);\r\n        if (errorMassage) {\r\n            error[event.target.name] = errorMassage;\r\n        } else {\r\n            delete error[event.target.name];\r\n        }\r\n        this.setState({\r\n            [event.target.name]: event.target.value,\r\n            error\r\n        })\r\n    };\r\n    handleChange = (value) => {\r\n        this.setState({\r\n            country: value\r\n        })\r\n    };\r\n\r\n    validationProperty = event => {\r\n        const Obj = { [event.target.name]: event.target.value };\r\n        const schema = { [event.target.name]: this.schema[event.target.name] }\r\n        const { error } = Joi.validate(Obj, schema);\r\n        return error ? error.details[0].message : null\r\n    };\r\n\r\n    validate = () => {\r\n        const options = { abortEarly: false }\r\n        const form = {\r\n            name: this.state.name,\r\n            email: this.state.email,\r\n            phone: this.state.phone,\r\n            description: this.state.description,\r\n        }\r\n        const { error } = Joi.validate(form, this.schema, options)\r\n        if (!error) return null;\r\n\r\n        const errors = {};\r\n        for (let item of error.details) errors[item.path[0]] = item.message\r\n        return errors;\r\n    };\r\n\r\n    submitHandler = event => {\r\n        event.preventDefault()\r\n        const error = this.validate();\r\n        if (error) {\r\n            this.setState({\r\n                error: error || {}\r\n            })\r\n        } else {\r\n            this.setState({\r\n                name: '',\r\n                phone: '',\r\n                email: '',\r\n                address: '',\r\n                description: '',\r\n            })\r\n            toast.success('Please check Consol log')\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const options = [\r\n            { level: 'Family Law', value: 'family law' },\r\n            { level: 'Criminal Law', value: 'criminal law' },\r\n            { level: 'Business Law', value: 'business law' },\r\n            { level: 'Personal Injury', value: 'personal injury' },\r\n            { level: 'Education Law', value: 'education law' },\r\n            { level: 'Drugs Crime', value: 'drugs crime' },\r\n        ]\r\n\r\n        return (\r\n            <form onSubmit={this.submitHandler} className='contactForm'>\r\n                <Grid container spacing={4}>\r\n                    <Grid item sm={6} xs={12}>\r\n                        <Grid className=\"formInput\">\r\n                            <input\r\n                                placeholder=\"Your Name\"\r\n                                value={this.state.name}\r\n                                name=\"name\"\r\n                                onChange={this.changeHandler}\r\n                                className=\"form-control\"\r\n                                type=\"text\" />\r\n                            {this.state.error.name && <p>{this.state.error.name}</p>}\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n                    <Grid item sm={6} xs={12}>\r\n                        <Grid className=\"formInput\">\r\n                            <input\r\n                                placeholder=\"Phone\"\r\n                                value={this.state.phone}\r\n                                name=\"phone\"\r\n                                onChange={this.changeHandler}\r\n                                className=\"form-control\"\r\n                                type=\"phone\" />\r\n                            {this.state.error.phone && <p>{this.state.error.phone}</p>}\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item sm={6} xs={12}>\r\n                        <Grid className=\"formInput\">\r\n                            <input\r\n                                placeholder=\"Email\"\r\n                                value={this.state.email}\r\n                                name=\"email\"\r\n                                onChange={this.changeHandler}\r\n                                className=\"form-control\"\r\n                                type=\"email\" />\r\n                            {this.state.error.email && <p>{this.state.error.email}</p>}\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item sm={6} xs={12}>\r\n                        <Grid className=\"formInput\">\r\n                            {this.props.addressInfo ? (\r\n                                <Grid className=\"formInput\">\r\n                                    <input\r\n                                        placeholder=\"Address\"\r\n                                        value={this.state.address}\r\n                                        name=\"address\"\r\n                                        onChange={this.changeHandler}\r\n                                        className=\"form-control\"\r\n                                        type=\"address\" />\r\n                                </Grid>\r\n                            ) : (\r\n                                    <select\r\n                                        value={this.state.address}\r\n                                        className=\"form-control\"\r\n                                        onChange={this.changeHandler}\r\n                                        name=\"address\">\r\n                                        {options.map(option => (\r\n                                            <option\r\n                                                key={option.value}\r\n                                                value={option.value}\r\n                                            >\r\n                                                {option.level}\r\n                                            </option>\r\n                                        ))}\r\n                                    </select>\r\n                                )}\r\n\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Grid className=\"formInput\">\r\n                            <textarea\r\n                                className=\"form-control\"\r\n                                value={this.state.description}\r\n                                onChange={this.changeHandler}\r\n                                placeholder=\"Case Description...\"\r\n                                name=\"description\" />\r\n                            {this.state.error.description && <p>{this.state.error.description}</p>}\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item sm={6} xs={12}>\r\n                        <Button type=\"submit\">Appointment</Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </form>\r\n        )\r\n    }\r\n}\r\nexport default Form"]},"metadata":{},"sourceType":"module"}