{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport Joi from 'joi-browser';\nimport { Button, Grid, TextField } from '@material-ui/core';\nimport { toast } from 'react-toastify';\n\nclass Form extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      name: '',\n      phone: '',\n      email: '',\n      address: '',\n      description: '',\n      error: {}\n    });\n\n    _defineProperty(this, \"schema\", {\n      email: Joi.string().email({\n        minDomainAtoms: 2\n      }).required().error(errors => {\n        errors.forEach(err => {\n          switch (err.type) {\n            case \"string.email\":\n              err.message = 'email mast be A Valid Email';\n              break;\n\n            default:\n              err.message = 'email can not be empity';\n              break;\n          }\n        });\n        return errors;\n      }),\n      phone: Joi.string().required().error(errors => {\n        errors.forEach(err => {\n          switch (err.type) {\n            default:\n              err.message = 'phone can not be Empity';\n              break;\n          }\n        });\n        return errors;\n      }),\n      name: Joi.string().required().error(errors => {\n        errors.forEach(err => {\n          switch (err.type) {\n            default:\n              err.message = 'name can not be Empity';\n              break;\n          }\n        });\n        return errors;\n      }),\n      description: Joi.string().required().error(errors => {\n        errors.forEach(err => {\n          switch (err.type) {\n            default:\n              err.message = 'description can not be Empity';\n              break;\n          }\n        });\n        return errors;\n      }),\n      address: Joi.string()\n    });\n\n    _defineProperty(this, \"changeHandler\", event => {\n      const error = _objectSpread({}, this.state.error);\n\n      const errorMassage = this.validationProperty(event);\n\n      if (errorMassage) {\n        error[event.target.name] = errorMassage;\n      } else {\n        delete error[event.target.name];\n      }\n\n      this.setState({\n        [event.target.name]: event.target.value,\n        error\n      });\n    });\n\n    _defineProperty(this, \"handleChange\", value => {\n      this.setState({\n        country: value\n      });\n    });\n\n    _defineProperty(this, \"validationProperty\", event => {\n      const Obj = {\n        [event.target.name]: event.target.value\n      };\n      const schema = {\n        [event.target.name]: this.schema[event.target.name]\n      };\n      const {\n        error\n      } = Joi.validate(Obj, schema);\n      return error ? error.details[0].message : null;\n    });\n\n    _defineProperty(this, \"validate\", () => {\n      const options = {\n        abortEarly: false\n      };\n      const form = {\n        name: this.state.name,\n        email: this.state.email,\n        phone: this.state.phone,\n        description: this.state.description\n      };\n      const {\n        error\n      } = Joi.validate(form, this.schema, options);\n      if (!error) return null;\n      const errors = {};\n\n      for (let item of error.details) errors[item.path[0]] = item.message;\n\n      return errors;\n    });\n\n    _defineProperty(this, \"submitHandler\", event => {\n      event.preventDefault();\n      const error = this.validate();\n\n      if (error) {\n        this.setState({\n          error: error || {}\n        });\n      } else {\n        this.setState({\n          name: '',\n          phone: '',\n          email: '',\n          address: '',\n          description: ''\n        });\n        toast.success('Please check Consol log');\n      }\n    });\n  }\n\n  render() {\n    const options = [{\n      level: 'Family Law',\n      value: 'family law'\n    }, {\n      level: 'Criminal Law',\n      value: 'criminal law'\n    }, {\n      level: 'Business Law',\n      value: 'business law'\n    }, {\n      level: 'Personal Injury',\n      value: 'personal injury'\n    }, {\n      level: 'Education Law',\n      value: 'education law'\n    }, {\n      level: 'Drugs Crime',\n      value: 'drugs crime'\n    }];\n    return /*#__PURE__*/_jsx(\"form\", {\n      onSubmit: this.submitHandler,\n      className: \"contactForm\",\n      children: /*#__PURE__*/_jsxs(Grid, {\n        container: true,\n        spacing: 4,\n        children: [/*#__PURE__*/_jsx(Grid, {\n          item: true,\n          sm: 6,\n          xs: 12,\n          children: /*#__PURE__*/_jsxs(Grid, {\n            className: \"formInput\",\n            children: [/*#__PURE__*/_jsx(\"input\", {\n              placeholder: \"Your Name\",\n              value: this.state.name,\n              name: \"name\",\n              onChange: this.changeHandler,\n              className: \"form-control\",\n              type: \"text\"\n            }), this.state.error.name && /*#__PURE__*/_jsx(\"p\", {\n              children: this.state.error.name\n            })]\n          })\n        }), /*#__PURE__*/_jsx(Grid, {\n          item: true,\n          sm: 6,\n          xs: 12,\n          children: /*#__PURE__*/_jsxs(Grid, {\n            className: \"formInput\",\n            children: [/*#__PURE__*/_jsx(\"input\", {\n              placeholder: \"Phone\",\n              value: this.state.phone,\n              name: \"phone\",\n              onChange: this.changeHandler,\n              className: \"form-control\",\n              type: \"phone\"\n            }), this.state.error.phone && /*#__PURE__*/_jsx(\"p\", {\n              children: this.state.error.phone\n            })]\n          })\n        }), /*#__PURE__*/_jsx(Grid, {\n          item: true,\n          sm: 6,\n          xs: 12,\n          children: /*#__PURE__*/_jsxs(Grid, {\n            className: \"formInput\",\n            children: [/*#__PURE__*/_jsx(\"input\", {\n              placeholder: \"Email\",\n              value: this.state.email,\n              name: \"email\",\n              onChange: this.changeHandler,\n              className: \"form-control\",\n              type: \"email\"\n            }), this.state.error.email && /*#__PURE__*/_jsx(\"p\", {\n              children: this.state.error.email\n            })]\n          })\n        }), /*#__PURE__*/_jsx(Grid, {\n          item: true,\n          sm: 6,\n          xs: 12,\n          children: /*#__PURE__*/_jsx(Grid, {\n            className: \"formInput\",\n            children: this.props.addressInfo ? /*#__PURE__*/_jsx(Grid, {\n              className: \"formInput\",\n              children: /*#__PURE__*/_jsx(\"input\", {\n                placeholder: \"Address\",\n                value: this.state.address,\n                name: \"address\",\n                onChange: this.changeHandler,\n                className: \"form-control\",\n                type: \"address\"\n              })\n            }) : /*#__PURE__*/_jsx(\"select\", {\n              value: this.state.address,\n              className: \"form-control\",\n              onChange: this.changeHandler,\n              name: \"address\",\n              children: options.map(option => /*#__PURE__*/_jsx(\"option\", {\n                value: option.value,\n                children: option.level\n              }, option.value))\n            })\n          })\n        }), /*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxs(Grid, {\n            className: \"formInput\",\n            children: [/*#__PURE__*/_jsx(\"textarea\", {\n              className: \"form-control\",\n              value: this.state.description,\n              onChange: this.changeHandler,\n              placeholder: \"Case Description...\",\n              name: \"description\"\n            }), this.state.error.description && /*#__PURE__*/_jsx(\"p\", {\n              children: this.state.error.description\n            })]\n          })\n        }), /*#__PURE__*/_jsx(Grid, {\n          item: true,\n          sm: 6,\n          xs: 12,\n          children: /*#__PURE__*/_jsx(Button, {\n            type: \"submit\",\n            children: \"Appointment\"\n          })\n        })]\n      })\n    });\n  }\n\n}\n\nexport default Form;","map":null,"metadata":{},"sourceType":"module"}