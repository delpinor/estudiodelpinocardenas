{"ast":null,"code":"import _defineProperty from \"/home/delpinor/Dropbox/git/delpinocardenas.com.ar/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { IS_LOADING, RE_RENDERED, THROW_ERROR, THROW_SUCCESS } from \"../constants\";\nimport { toast } from \"react-toastify\";\nvar init = {\n  isLoading: false,\n  error: '',\n  success: '',\n  reRendered: false\n};\n\nvar metaReducer = function metaReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : init;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case THROW_ERROR:\n      {\n        toast.error(action.payload);\n        return _objectSpread(_objectSpread({}, state), {}, {\n          error: action.payload\n        });\n      }\n\n    case THROW_SUCCESS:\n      {\n        toast.success(action.payload);\n        return _objectSpread(_objectSpread({}, state), {}, {\n          success: action.payload\n        });\n      }\n\n    case IS_LOADING:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoading: action.payload\n      });\n\n    case RE_RENDERED:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        reRendered: action.payload\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default metaReducer;","map":{"version":3,"sources":["/home/delpinor/Dropbox/git/delpinocardenas.com.ar/store/reducers/metaReducer.js"],"names":["IS_LOADING","RE_RENDERED","THROW_ERROR","THROW_SUCCESS","toast","init","isLoading","error","success","reRendered","metaReducer","state","action","type","payload"],"mappings":";;;;;;AAAA,SAASA,UAAT,EAAqBC,WAArB,EAAkCC,WAAlC,EAA+CC,aAA/C,QAAoE,cAApE;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,IAAMC,IAAI,GAAG;AACTC,EAAAA,SAAS,EAAE,KADF;AAETC,EAAAA,KAAK,EAAE,EAFE;AAGTC,EAAAA,OAAO,EAAE,EAHA;AAITC,EAAAA,UAAU,EAAE;AAJH,CAAb;;AAOA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAA0B;AAAA,MAAzBC,KAAyB,uEAAjBN,IAAiB;AAAA,MAAXO,MAAW;;AAC1C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKX,WAAL;AAAkB;AACdE,QAAAA,KAAK,CAACG,KAAN,CAAYK,MAAM,CAACE,OAAnB;AACA,+CACOH,KADP;AAEIJ,UAAAA,KAAK,EAAEK,MAAM,CAACE;AAFlB;AAIH;;AACD,SAAKX,aAAL;AAAoB;AAChBC,QAAAA,KAAK,CAACI,OAAN,CAAcI,MAAM,CAACE,OAArB;AACA,+CACOH,KADP;AAEIH,UAAAA,OAAO,EAAEI,MAAM,CAACE;AAFpB;AAIH;;AACD,SAAKd,UAAL;AACI,6CACOW,KADP;AAEIL,QAAAA,SAAS,EAAEM,MAAM,CAACE;AAFtB;;AAIJ,SAAKb,WAAL;AACI,6CACOU,KADP;AAEIF,QAAAA,UAAU,EAAEG,MAAM,CAACE;AAFvB;;AAIJ;AACI,aAAOH,KAAP;AA1BR;AA4BH,CA7BD;;AA+BA,eAAeD,WAAf","sourcesContent":["import { IS_LOADING, RE_RENDERED, THROW_ERROR, THROW_SUCCESS } from \"../constants\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst init = {\r\n    isLoading: false,\r\n    error: '',\r\n    success: '',\r\n    reRendered: false\r\n};\r\n\r\nconst metaReducer = (state = init, action) => {\r\n    switch (action.type) {\r\n        case THROW_ERROR: {\r\n            toast.error(action.payload);\r\n            return {\r\n                ...state,\r\n                error: action.payload\r\n            }\r\n        }\r\n        case THROW_SUCCESS: {\r\n            toast.success(action.payload);\r\n            return {\r\n                ...state,\r\n                success: action.payload\r\n            }\r\n        }\r\n        case IS_LOADING:\r\n            return {\r\n                ...state,\r\n                isLoading: action.payload\r\n            };\r\n        case RE_RENDERED:\r\n            return {\r\n                ...state,\r\n                reRendered: action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default metaReducer;"]},"metadata":{},"sourceType":"module"}